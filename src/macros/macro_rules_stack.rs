#[macro_export]
macro_rules! macro_rules_stack { ($name:ident {
/* FLOW */

$(    ([              $($stack_a:tt)*  ][  $($stack_b:tt)*  ]) => {   $($stack_c:tt)*  }; )*
$(    (pub use          $($use_a:tt)*                        ) => {     $($use_b:tt)*  }; )*
$(    (#[              $($attr_a:tt)* ]     $($attr_b:tt)*   ) => {    $($attr_c:tt)*  }; )*
$(    (type            $($type_a:tt)*                        ) => {    $($type_b:tt)*  }; )*
$(    (pub struct    $($struct_a:tt)*                        ) => {  $($struct_b:tt)*  }; )*
$(    (pub enum        $($enum_a:tt)*                        ) => {    $($enum_b:tt)*  }; )*
$(    (impl            $($impl_a:tt)*                        ) => {    $($impl_b:tt)*  }; )*
$(    ({              $($block_a:tt)*                       }) => {   $($block_b:tt)*  }; )*

/* FLOW */
}) => {
/* NESTED */
macro_rules! $name {
/* **** NESTED **** */

(  [$$($$_a_:tt)*]                 [  ] ) => { $$($$_a_)*                };
( [[$$($$_a_:tt)*][$$($$_b_:tt)*]] [{}] ) => { $$($$_a_)* { $$($$_b_)* } }; // RULE B
// --------------------------------------------------------------------------


$(    ([    $($stack_a)*   ][  $($stack_b)*  ]) => {               $($stack_c)*                          }; )*
// ----+--+-------------+--++----------------+---------------+--+----------------+--++--------------+-----------

$(    ([   $$($$_a_:tt)*   ][ #[$($attr_a)*]
                                $($attr_b)*
                               $$($$_c_:tt)* ]) => { $name! {   [   $$($$_a_)*
                                                                    $($attr_c)*     ][  $$($$_c_)*  ] }  }; )*
// ----+--+-------------+--++----------------+---------------+--+----------------+--++--------------+-----------

/* default */
      ([   $$($$_a_:tt)*   ][
                            #[$$($$_b_:tt)*]
                              $$($$_c_:tt)*  ]) => { $name! {   [   $$($$_a_)*
                                                                    #[ $$($$_b_)*]  ][  $$($$_c_)*  ] }  };
// ----+--+-------------+--++----------------+---------------+--+----------------+--++--------------+-----------


$(    ([   $$($$_a_:tt)*   ][pub use
                                   $($use_a)*]) => { $name! {[      $$($$_a_)*
                                                                    $($use_b)*      ][              ] }  }; )*
// ----+--+-------------+--++----------------+---------------+--+----------------+--++--------------+-----------

$(    ([   $$($$_a_:tt)*   ][type $($type_a)*]) => { $name! {[      $$($$_a_)*
                                                                    $($type_b)*     ][              ] }  }; )*
// ----+--+-------------+--++----------------+---------------+--+----------------+--++--------------+-----------


$(    ([   $$($$_a_:tt)*   ][pub struct
                                $($struct_a)*]) => { $name! {[      $$($$_a_)*
                                                                    $($struct_b)*   ][              ] }  }; )*
// ----+--+-------------+--++----------------+---------------+--+----------------+--++--------------+-----------


$(    ([  $$($$_a_:tt)*    ][impl $($impl_a)*]) => { $name! {[      $$($$_a_)*
                                                                    $($impl_b)*     ][              ] }  }; )*
// ----+--+-------------+--++----------------+---------------+--+----------------+--++--------------+-----------

                             /* ***        */
$(    ([   $$($$_a_:tt)*   ][pub enum $($enum_a)*                                     {/* ***    */
                                                                                       $$( $$_Cons:ident { $$($$_body:tt)* }, )*
                                                                                       /*    *** */}
                             /*        *** */]) => { $name! {[  [/**/$$($$_a_)*
                                      $($enum_b)*                           /**/]
                                                                [/* to fill   */]   ][{/* ***    */
                                                                                       $$( $$_Cons       { $$($$_body   )* }, )*
                                                                                       /*    *** */}] }  }; )*
// ----+--+-------------+--++----------------+---------------+--+----------------+--++--------------+-----------


/* default */                /* ***        */
      ([   $$($$_a_:tt)*   ][pub enum $$_Name:ident$$(<$$($$_Ab:ident,)*>)?           {/* ***    */
                                                                                       $$( $$_Cons:ident { $$($$_body:tt)* }, )*
                                                                                       /*    *** */}
                             /*        *** */]) => { $name! {[  [/**/$$($$_a_)*
                             pub enum $$_Name      $$(<$$($$_Ab      ),*>)? /**/]
                                                                [/* to fill   */]   ][{/* ***    */
                                                                                       $$( $$_Cons       { $$($$_body   )* }, )*
                                                                                       /*    *** */}] }  };
// ----+--+-------------+--++----------------+---------------+--+----------------+--++--------------+-----------


$(    ([  [$$($$_a_:tt)*]
          [$$($$_b_:tt)*]  ][{ $($block_a)*
                              $$($$_c_:tt)* }]) => { $name! {[  [   $$($$_a_)*   ]
                                                                [   $$($$_b_)* // <= filled
                                                                     $($block_b)*]  ][{ $$($$_c_)* }] }  }; )*
// ----+--+-------------+--++----------------+---------------+--+----------------+--++--------------+-----------

([][$$($$t:tt)*]) => { log_syntax! { $$($$t)* } };

($$($$t:tt)*) => { $name! { [] [$$($$t)*] } };

/* **** NESTED **** */
}
/* NESTED */
};}
